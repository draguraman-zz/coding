using System;
using System.Collections;
using System.Collections.Specialized;
using System.Collections.Generic;

	namespace TreeTraversal{
		
		
		public class Relation {
		
			public string parent;
			public string child;
		
			public Relation(string parent, string child) { 
				this.parent=parent;
				this.child=child;
			}
			
		}
	
		
	public class TreePrinter {
		
		public static void Main(string[] args) {
			
			
			//list of relations
			List<Relation> input = new List<Relation>();
			input.Add(new Relation("animal","mammal"));
			input.Add(new Relation("animal","bird"));
			input.Add(new Relation("lifeform","animal"));
			input.Add(new Relation("cat","lion"));
			input.Add(new Relation("mammal","cat"));
			input.Add(new Relation("animal","fish"));
	
			TreePrinter t = new TreePrinter();
			t.printTree(input);
			}
		
		public void printTree(List<Relation> relations){
			
			HashSet<string> setOfNotRootElements = new HashSet<string>();
			//build a tree using HashMap. You can also build the tree 
			//put a Map inside a Map, but this seems simpler.
			Dictionary<string, List<string>> dict = new Dictionary<string, List<string>>();
			
			foreach(Relation r in relations){
				List<string> children =  new List<string>();
				if(dict.ContainsKey(r.parent)){
					children = dict[r.parent]; //if parent already present ,get the child list and append to it
				}
				children.Add(r.child);
				dict[r.parent]= children;//mutable add the dictionary again with the new child set
				//keeping track of children..
				setOfNotRootElements.Add(r.child);
					}
				//find the root
				string root="" ;
				foreach(Relation r in relations){
				 if(!(setOfNotRootElements.Contains(r.parent))){
					root=r.parent;
			      }}
			
				foreach (KeyValuePair<string,List<string>> kv in dict)	{
					Console.Write("Key is "+ kv.Key +"  Children are "+ string.Join(",", kv.Value.ToArray())+"\n");
				}	
				printNode(root, dict);
			}
		
		
					public void printNode(string parent, Dictionary<string, List<string>> map){
					System.Console.Write(parent+" \n");
					List<string> children = map[parent];
					if(children != null){
						foreach (string child in children){
							 if(map.ContainsKey(child))
								printNode(child, map);
								else{
								System.Console.Write(child+" \n");
								}
						}
					}
				}
			}
	 
	}
	